import os
import subprocess
from rich.console import Console
from rich.panel import Panel
from datetime import datetime
import re
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm  # Added for progress bar

# Initialize console for rich output
console = Console()
# Logo for ZapFind
zap_logo = """
  ⠀⠀⠀⠀⠀⠀  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⠆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⠟⠁⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣿⣿⡿⠋⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ 
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀       
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠴⠿⣿⣿⣿⣿⣿⣿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀ ⠀ 
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⠀⠀⠀⠀    ######  #######    #######    #    ######
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀    #     # #                #   # #   #     #     
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀        #     # #               #   #   #  #     #
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀     #     # #              #   #     # #     #       
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀     ######  #####         #    #     # ######                              
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  #     # #            #     ####### #
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   #     # #           #      #     # #
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   ######  #######    ####### #     # #⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⣩⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢀⣠⣾⣿⣿⡿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢀⣴⣿⣿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠠⠞⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀"""
print(zap_logo)


# Function to validate IP or domain
def validate_target(target):
    ip_pattern = r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$"
    domain_pattern = r"^(?:[a-zA-Z0-9-]{1,63}\.)+[a-zA-Z]{2,}$"
    return re.match(ip_pattern, target) or re.match(domain_pattern, target)

# Function to validate ports input
def validate_ports(ports):
    if not ports:
        return True
    port_pattern = r"^\d{1,5}(,\d{1,5})*$"
    return re.match(port_pattern, ports)

# Function to check if a tool is installed
def check_tool_availability(tool):
    result = subprocess.run(["which", tool], capture_output=True, text=True)
    return result.returncode == 0

# Function to run Nmap scan
def run_nmap(target, ports=None):
    try:
        command = ["nmap", "-sV"]
        if ports:
            command.extend(["-p", ports])
        command.append(target)

        with tqdm(total=100, desc="Running Nmap Scan", ncols=75) as pbar:
            result = subprocess.run(command, capture_output=True, text=True, check=True)
            for _ in range(10):  # Simulating progress
                pbar.update(10)  # Update progress bar

        return result.stdout
    except FileNotFoundError:
        return "[Error] Nmap is not installed or not in PATH."
    except subprocess.CalledProcessError as e:
        return f"[Error] Nmap failed with error: {e}"

# Function to run Nikto scan
def run_nikto(target):
    try:
        command = ["nikto", "-h", target]

        with tqdm(total=100, desc="Running Nikto Scan", ncols=75) as pbar:
            result = subprocess.run(command, capture_output=True, text=True, check=True)
            for _ in range(10):  # Simulating progress
                pbar.update(10)  # Update progress bar

        return result.stdout
    except FileNotFoundError:
        return "[Error] Nikto is not installed or not in PATH."
    except subprocess.CalledProcessError as e:
        return f"[Error] Nikto failed with error: {e}"

# Function to save results to a file
def save_to_file(data, target):
    os.makedirs("scan_reports", exist_ok=True)
    filename = f'scan_reports/scan_report_{target}_{datetime.now().strftime("%Y%m%d%H%M%S")}.txt'
    with open(filename, 'w') as file:
        file.write(f"\n\n--- Scan Report ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')}) ---\n")
        file.write(data)
    console.print(f"[bold green]Results saved to {filename}[/bold green]")

# Function to print results in a nice format
def print_results(data):
    panel = Panel(data, title="Scan Results", expand=False)
    console.print(panel)

# Function to display help message
def display_help():
    help_message = """
    [bold cyan]ZapFind Tool Help:[/bold cyan]

    This tool allows you to perform security scans using Nmap and Nikto.

    [yellow]Usage Instructions:[/yellow]
    1. Enter the target IP address or domain.
    2. Choose the type of scan you want to perform:
       [green]- Nmap scan: Scans for open ports and services.[/green]
       [green]- Nikto scan: Scans for vulnerabilities on web servers.[/green]
       [green]- Both: Runs both scans sequentially.[/green]
    3. View the results and save them to a file.

    [yellow]Disclaimer:[/yellow]
    - This tool is for educational and authorized testing purposes only.
    - Unauthorized use of this tool is strictly prohibited and may violate laws.

    [bold red]Use responsibly![/bold red]
    """
    console.print(Panel(help_message, title="Help", expand=False))

# Function to run scans concurrently
def run_scans_concurrently(target, ports):
    with ThreadPoolExecutor() as executor:
        future_nmap = executor.submit(run_nmap, target, ports)
        future_nikto = executor.submit(run_nikto, target)

        nmap_results = future_nmap.result()
        nikto_results = future_nikto.result()

    return nmap_results, nikto_results

# Main function to drive the tool
def main():
    console.print("[bold green]Welcome to the Scanning ZapFind Tool![/bold green]")

    console.print("[bold yellow]Legal Disclaimer:[/bold yellow]")
    console.print("[bold red]This tool is intended for authorized and ethical use only. Unauthorized scanning may be illegal and is strictly prohibited.[/bold red]")

    show_help = input("Do you need help? (yes/no): ").strip().lower()
    if show_help in ["yes", "y"]:
        display_help()
        return

    nmap_available = check_tool_availability("nmap")
    nikto_available = check_tool_availability("nikto")

    if not nmap_available and not nikto_available:
        console.print("[bold red]Neither Nmap nor Nikto is installed. Please install them to proceed.[/bold red]")
        return

    target = input("Enter the target IP or domain: ")
    while not validate_target(target):
        console.print("[bold red]Invalid target. Please enter a valid IP or domain.[/bold red]")
        target = input("Enter the target IP or domain: ")

    console.print("\n[bold yellow]Select scanning option:[/bold yellow]")
    console.print("[1] Nmap scan")
    console.print("[2] Nikto scan")
    console.print("[3] Both Nmap and Nikto")

    choice = input("\nEnter your choice (1/2/3): ")

    if choice == '1' and nmap_available:
        ports = input("Enter specific ports (comma-separated) or leave blank for all: ")
        while not validate_ports(ports):
            console.print("[bold red]Invalid port input. Please enter valid port numbers separated by commas.[/bold red]")
            ports = input("Enter specific ports (comma-separated) or leave blank for all: ")
        results = run_nmap(target, ports)
        print_results(results)
        save_to_file(results, target)
    elif choice == '2' and nikto_available:
        results = run_nikto(target)
        print_results(results)
        save_to_file(results, target)
    elif choice == '3':
        if nmap_available and nikto_available:
            ports = input("Enter specific ports (comma-separated) or leave blank for all: ")
            while not validate_ports(ports):
                console.print("[bold red]Invalid port input. Please enter valid port numbers separated by commas.[/bold red]")
                ports = input("Enter specific ports (comma-separated) or leave blank for all: ")
            nmap_results, nikto_results = run_scans_concurrently(target, ports)
            combined_results = f"Nmap Results:\n{nmap_results}\n\nNikto Results:\n{nikto_results}"
            print_results(combined_results)
            save_to_file(combined_results, target)
        else:
            console.print("[bold red]Both tools are required for this option, but one or more are missing.[/bold red]")
    else:
        console.print("[bold red]Invalid choice or required tool not available! Exiting the tool...[/bold red]")

if __name__ == "__main__":
    main()

